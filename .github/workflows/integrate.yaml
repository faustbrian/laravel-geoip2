# https://docs.github.com/en/actions

name: "Integrate"

on: # yamllint disable-line rule:truthy
    pull_request: null
    push:
        branches:
            - "main"

jobs:
    code-coverage:
        name: "Code Coverage"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "pcov"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Set up problem matchers for pestphp/pest"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Collect code coverage with PCOV and pestphp/pest"
              run: "vendor/bin/pest --parallel --coverage-clover=.build/phpunit/logs/clover.xml"

            - name: "Send code coverage report to codecov.io"
              uses: "codecov/codecov-action@v5.3.1"
              with:
                  files: ".build/phpunit/logs/clover.xml"
                  token: "${{ secrets.CODECOV_TOKEN }}"

    coding-standards:
        name: "Coding Standards"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Lint YAML files"
              uses: "ibiqlik/action-yamllint@v3.1.1"
              with:
                  config_file: ".yamllint.yaml"
                  file_or_dir: "."
                  strict: true

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "none"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Run ergebnis/composer-normalize"
              run: "composer normalize --ansi --dry-run"

            - name: "Cache cache directory for friendsofphp/php-cs-fixer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: ".build/php-cs-fixer"
                  key: "php-${{ matrix.php-version }}-php-cs-fixer-${{ github.ref_name }}"
                  restore-keys: |
                      php-${{ matrix.php-version }}-php-cs-fixer-main
                      php-${{ matrix.php-version }}-php-cs-fixer-

            - name: "Run friendsofphp/php-cs-fixer"
              run: "vendor/bin/php-cs-fixer fix --ansi --config=.php-cs-fixer.php --diff --dry-run --show-progress=dots --verbose"

    dependency-analysis:
        name: "Dependency Analysis"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "none"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Install maglnet/composer-require-checker"
              run: "composer global require maglnet/composer-require-checker"

            - name: "Run maglnet/composer-require-checker"
              run: "composer-require-checker check --ansi --config-file=$(pwd)/composer-require-checker.json --verbose"

    mutation-tests:
        name: "Mutation Tests"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "pcov"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer root version"
              uses: "basecodeoy/.github/actions/composer/determine-root-version@1.0.2"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Run mutation tests with PCOV and pestphp/pest"
              run: "./vendor/bin/pest --mutate --parallel --everything --covered-only"

    refactoring:
        name: "Refactoring"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "none"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Cache cache directory for rector/rector"
              uses: "actions/cache@v4.2.0"
              with:
                  path: ".build/rector"
                  key: "php-${{ matrix.php-version }}-rector-${{ github.ref_name }}"
                  restore-keys: |
                      php-${{ matrix.php-version }}-rector-main
                      php-${{ matrix.php-version }}-rector-

            - name: "Run automated refactoring with rector/rector"
              run: "vendor/bin/rector --ansi --config=rector.php --dry-run"

    security-analysis:
        name: "Security Analysis"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "none"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Check installed packages for security vulnerability advisories"
              run: "composer audit --ansi"

    static-code-analysis:
        name: "Static Code Analysis"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "locked"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "none"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Run phpstan/phpstan"
              run: "vendor/bin/phpstan --ansi --configuration=phpstan.neon --memory-limit=-1"

    tests:
        name: "Tests"

        runs-on: "ubuntu-latest"

        timeout-minutes: 5

        strategy:
            fail-fast: false
            matrix:
                php-version:
                    - "8.3"

                dependencies:
                    - "lowest"
                    - "locked"
                    - "highest"

        steps:
            - name: "Checkout"
              uses: "actions/checkout@v4.2.2"

            - name: "Set up PHP"
              uses: "shivammathur/setup-php@2.32.0"
              with:
                  coverage: "none"
                  extensions: "bcmath, ctype, curl, dom, exif, fileinfo, gd, iconv, imagick, intl, json, libxml, mbstring, none, opcache, pcntl, pdo, pdo_sqlite, phar, posix, simplexml, soap, sqlite, tokenizer, xml, xmlwriter, zip"
                  php-version: "${{ matrix.php-version }}"

            - name: "Set up problem matchers for PHP"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

            - name: "Set up problem matchers for pestphp/pest"
              run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

            - name: "Validate composer.json and composer.lock"
              run: "composer validate --ansi --strict"

            - name: "Determine composer cache directory"
              uses: "basecodeoy/.github/actions/composer/determine-cache-directory@1.0.2"

            - name: "Cache dependencies installed with composer"
              uses: "actions/cache@v4.2.0"
              with:
                  path: "${{ env.COMPOSER_CACHE_DIR }}"
                  key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
                  restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

            - name: "Remove platform configuration with composer"
              if: "matrix.dependencies != 'locked'"
              run: "composer config platform.php --ansi --unset"

            - name: "Install ${{ matrix.dependencies }} dependencies with composer"
              uses: "basecodeoy/.github/actions/composer/install@1.0.2"
              with:
                  dependencies: "${{ matrix.dependencies }}"

            - name: "Run unit tests with pestphp/pest"
              run: "vendor/bin/pest --parallel"
